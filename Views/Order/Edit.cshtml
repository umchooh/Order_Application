@model Order_Application.Models.ViewModel.UpdateOrder

@{
    ViewBag.Title = "Update";
}

<h2>Edit</h2>


@{
    //The attribute enctype="multipart/form-data" is required
    //if you are sending files as part of the HTTP POST request
}
@using (Html.BeginForm("Edit", "Order", new { id = Model.order.OrderID }, FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>Order</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.order.OrderID)

        <div class="form-group">
            @Html.LabelFor(model => model.order.OrderDate, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.order.OrderDate, new { htmlAttributes = new { @class = "form-control", Name = "OrderDate" } })
                @Html.ValidationMessageFor(model => model.order.OrderDate, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.order.CustomerID, "CustomerID", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.order.CustomerID, new { htmlAttributes = new { @class = "form-control", Name = "CustomerID" } })
                @Html.ValidationMessageFor(model => model.order.CustomerID, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Save" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div> My plan is to have a form similar to the order details.</div>
<div>It will list the current order information and allow client to make changes on the amount but not the price.</div>

<div>
    @Html.ActionLink("Back to List", "List")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
